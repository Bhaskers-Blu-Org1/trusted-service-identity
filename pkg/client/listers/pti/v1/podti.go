/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

// This file was automatically generated by lister-gen

package v1

import (
	v1 "github.ibm.com/brandon-lum/ti-keyrelease/pkg/apis/pti/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PodTILister helps list PodTIs.
type PodTILister interface {
	// List lists all PodTIs in the indexer.
	List(selector labels.Selector) (ret []*v1.PodTI, err error)
	// PodTIs returns an object that can list and get PodTIs.
	PodTIs(namespace string) PodTINamespaceLister
	PodTIListerExpansion
}

// podTILister implements the PodTILister interface.
type podTILister struct {
	indexer cache.Indexer
}

// NewPodTILister returns a new PodTILister.
func NewPodTILister(indexer cache.Indexer) PodTILister {
	return &podTILister{indexer: indexer}
}

// List lists all PodTIs in the indexer.
func (s *podTILister) List(selector labels.Selector) (ret []*v1.PodTI, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PodTI))
	})
	return ret, err
}

// PodTIs returns an object that can list and get PodTIs.
func (s *podTILister) PodTIs(namespace string) PodTINamespaceLister {
	return podTINamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PodTINamespaceLister helps list and get PodTIs.
type PodTINamespaceLister interface {
	// List lists all PodTIs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.PodTI, err error)
	// Get retrieves the PodTI from the indexer for a given namespace and name.
	Get(name string) (*v1.PodTI, error)
	PodTINamespaceListerExpansion
}

// podTINamespaceLister implements the PodTINamespaceLister
// interface.
type podTINamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PodTIs in the indexer for a given namespace.
func (s podTINamespaceLister) List(selector labels.Selector) (ret []*v1.PodTI, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PodTI))
	})
	return ret, err
}

// Get retrieves the PodTI from the indexer for a given namespace and name.
func (s podTINamespaceLister) Get(name string) (*v1.PodTI, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("podti"), name)
	}
	return obj.(*v1.PodTI), nil
}
